name: CMake Build

on:
  push:
    branches:
      - main
      - staging
      - development
  pull_request:
    branches:
      - development

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache vcpkg
        uses: actions/cache@v2
        with:
          path: vcpkg/installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}

      - name: Install CMake
        run: |
          wget https://github.com/Kitware/CMake/releases/download/v3.27.0/cmake-3.27.0-Linux-x86_64.sh
          sudo sh cmake-3.27.0-Linux-x86_64.sh --skip-license --prefix=/usr/local

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libudev-dev \
            libx11-dev \
            libxrandr-dev \
            libxcursor-dev \
            libgl1-mesa-dev
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install vcpkg
        run: |
          if [ ! -d "./vcpkg" ] ; then
            git clone https://github.com/Microsoft/vcpkg.git vcpkg
          else
            git -C vcpkg pull
          fi
          ./vcpkg/bootstrap-vcpkg.sh

      - name: Install dependencies
        run: ./vcpkg/vcpkg install --triplet x64-linux --feature-flags=manifests

      - name: Build
        run: cmake -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake -S . -B build -DBUILD_CICD=ON && cmake --build build

      - name: Get branch name or PR number
        id: extract_info
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "BUILD_INFO=PR-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          else
            echo "BUILD_INFO=$(echo ${{ github.event.ref }} | sed 's/refs\/heads\///g')" >> $GITHUB_ENV
          fi

      - name: Compress build result
        run: tar -czf build.tar.gz build

      - name: Upload build result
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_INFO }}-${{ github.sha }}-Build.tar.gz
          path: |
            ./build.tar.gz

      - name: Upload library
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_INFO }}-${{ github.sha }}.a
          path: |
            ./build/libDeFunBobEngine.a

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get branch name or PR number
        id: extract_info
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "BUILD_INFO=PR-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          else
            echo "BUILD_INFO=$(echo ${{ github.event.ref }} | sed 's/refs\/heads\///g')" >> $GITHUB_ENV
          fi

      - name: Install lcov, valgrind and xvfb
        run: sudo apt-get install -y lcov valgrind xvfb

      - name: Download build result
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.BUILD_INFO }}-${{ github.sha }}-Build.tar.gz

      - name: Extract build result to build folder
        run: tar -xzf build.tar.gz

      - name: Run tests
        run: |
          cd build
          xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' valgrind --leak-check=full --log-file=valgrind.txt --error-exitcode=1 ctest --output-on-failure

      - name: Generate coverage report
        run: |
          cd build
          lcov --capture --directory . --output-file coverage.info
          if [ -f coverage.info ]; then
            lcov --remove coverage.info '/usr/*' '**/vcpkg_installed/**' --output-file coverage.info || true;
            val=$?
            if [ $val -ne 0 ]; then
              echo "lcov failed with exit code $val"
              echo "lcov failed with exit code $val" >> coverage.info
              exit $val
            else
              lcov --list coverage.info || true;
              val=$?
              if [ $val -ne 0 ]; then
                echo "lcov --list failed with exit code $val, was the coverage.info file generated?"
                echo "lcov --list failed with exit code $val" >> coverage.info
                exit $val
              fi
            fi
          fi

      - name: Upload test result
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_INFO }}-${{ github.sha }}-Test.log
          path: |
            ./build/Testing/Temporary/LastTest.log

      - name: Upload coverage result
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_INFO }}-${{ github.sha }}-Coverage.info
          path: |
            ./build/coverage.info

      - name: Upload valgrind result
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_INFO }}-${{ github.sha }}-Valgrind.txt
          path: |
            ./build/valgrind.txt
